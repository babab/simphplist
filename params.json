{"name":"Simphplist","tagline":"PHP mini-framework with anti-framework features","body":"# Simphplist\r\n\r\nSimphplist is a mini-framework with anti-framework features. A\r\ncollection of losely coupled components, that helps you with shortcuts\r\nand clean API's for writing the most common idioms when developing web\r\napplications in PHP (MySQL handling, object mapper, authentication,\r\nvalidation, typechecking).\r\n\r\nYou can use it as a minimalistic base for writing custom (frameworks\r\nfor) applications. Simphplist is carefully designed to allow using it\r\nalongside any other (custom) framework.\r\n\r\n\r\n## API Reference\r\n\r\nSee: http://simphplist.org/annotated.html\r\n\r\n## Features / Components\r\n\r\nSimphplist is in the initial stages of development. Some components may\r\nbe actually useful already though.\r\n\r\n\r\n**DB\\MysqlHandler**\r\n\r\nMySQL handler with table prefix support\r\n[25% done of which 50% documented]\r\n\r\n**DB\\Model**\r\n\r\nSimplistic MySQL Object Mapper\r\n[20% done of which 0% documented]\r\n\r\n**Debug**\r\n\r\nStatic methods for dumping vars to a file or screen (html or text)\r\n[100% done of which 100% documented]\r\n\r\n**Json**\r\n\r\nShortcuts for common idioms in JSON interaction\r\n[50% done of which 0% documented]\r\n\r\n**Request**\r\n\r\nStatic methods for secure user input handling via REQUEST superglobal(s):\r\n(GET, POST, COOKIE)\r\n[30% done of which 0% documented]\r\n\r\n**Route**\r\n\r\nMinimalistic, flexible and extensible routing\r\n[70% done of which 80% documented]\r\n\r\n**String**\r\n\r\nStatic methods for common string manipulation / parsing tasks\r\n[60% done of which 20% documented]\r\n\r\n**Validate**\r\n\r\nClean static API for type checking and validation\r\n[10% done of which 100% documented]\r\n\r\n\r\n## Overview\r\n\r\n### Routing\r\n\r\nWhen a route is valid the closure function will be run with any\r\nidentifier (`{identifier}`) matches made available to the closure /\r\nanonymous function as function arguments.\r\n\r\nWhen a route is matched, any subsequent calls to `when()` or\r\n`other()` will have no effect. The `setPrefix()`, `when()` and `other()`\r\nmethods can be chained together like below, which will read somewhat\r\nlike a typical if..elseif..else construct.\r\n\r\nThe API design is inspired by:\r\n\r\n- Laravel Routing        : the closure function\r\n- AngularJS' ngRoute     : when..other syntax and `:identifier`\r\n                           for matching identifiers\r\n- AngularJS' ngController: dependency injection based on\r\n                           postional arguments\r\n\r\nAn `$uri` can have identifiers, which are marked with `{}`.\r\nIn the following example there is an 'id' identifier\r\nfor a blog article.\r\n\r\nWhen the url is matched, any values that are matched with\r\nidentifiers are made available as arguments of the closure, in\r\nleft-to-right order. Any extra arguments passed between the\r\nURI string and the closure function are also made available as\r\narguments of the closure, after the identifier arguments.\r\n\r\n```php\r\n\r\n<?php\r\n// -- Include composer autoloader or require src/Babab/Simphplist/Route.php;\r\n\r\n$foo = 'bar'; // A string that is used in some routes\r\n\r\n(new \\Babab\\Simphplist\\Route)\r\n\r\n// Use a prefix for developing without rewrite support\r\n// (for example with PHP's excellent built in webserver)\r\n->setPrefix('/route.php')\r\n\r\n->when('/articles/', function() {\r\n\r\n    echo 'This is the article list';\r\n\r\n})\r\n// The identifier is made available to the closure function\r\n->when('/articles/{id}/', function($id) {\r\n\r\n    echo 'This is article: ' . $id;\r\n\r\n})\r\n// Here $foo is injected into the closure and used\r\n->when('/archive/', $foo, function($foo) {\r\n\r\n    echo 'This is the archive main page';\r\n    echo \"<br>Also, foo = $foo\";\r\n\r\n})\r\n// Here $foo is injected into the closure after the identifiers\r\n->when('/archive/{y}/{m}/', $foo, function($y, $m, $foo) {\r\n\r\n    echo \"This is the archive<br>year: $y<br>month: $m\";\r\n    echo \"<br>Also, foo = $foo\";\r\n\r\n})\r\n// Here any value for {void} is matched, but not used in the closure,\r\n// the user is redirected to the current year/month instead.\r\n->when('/archive/{void}/', function() {\r\n\r\n    $y = date('y');\r\n    $m = date('m');\r\n    \\Babab\\Simphplist\\Route::redirect(\"/route.php/articles/$y/$m/\");\r\n\r\n})\r\n// When no previous matches are found, redirect to /articles/.\r\n// You could also show a 404 error page here.\r\n->other(function() {\r\n\r\n    \\Babab\\Simphplist\\Route::redirect(\"/route.php/articles/\");\r\n\r\n});\r\n\r\n```\r\n\r\n## Installing\r\n\r\nInstall from packagist using composer, by adding a composer.json file:\r\n\r\n```json\r\n\r\n{\r\n    \"name\": \"myProject\",\r\n    \"require\": {\r\n        \"simphplist/simphplist\": \"dev-master\"\r\n    }\r\n}\r\n\r\n```\r\n\r\nAnd running `composer install`.\r\n\r\n- Packagist: https://packagist.org/packages/simphplist/simphplist\r\n\r\n\r\n## License\r\n\r\nCopyright (c) 2014  Benjamin Althues <benjamin@babab.nl>\r\n\r\nPermission to use, copy, modify, and distribute this software for any\r\npurpose with or without fee is hereby granted, provided that the above\r\ncopyright notice and this permission notice appear in all copies.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\r\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\r\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\r\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\r\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\r\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\r\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}