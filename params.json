{"name":"Simphplist","tagline":" Decoupled (framework) libraries with simplistic API's","body":"# Simphplist\r\n\r\nDecoupled (framework) libraries with simplistic API's\r\n\r\nSimphplist helps you with shortcuts and clean API's for writing the\r\nmost common idioms when developing web applications in PHP (routing,\r\nvalidation and $\\_GET/$\\_POST filtering).\r\n\r\nYou can use it as a minimalistic base for writing custom (frameworks\r\nfor) applications. Simphplist is carefully designed to allow using it\r\nalongside any other (custom) framework.\r\n\r\n\r\n## API Documentation\r\n\r\nSee: http://simphplist.org/annotated.html\r\n\r\n\r\n\r\n## Overview\r\n\r\n### Routing\r\n\r\nWhen a route is valid the closure function will be run with any\r\nidentifier `/url/:identifier/edit/` matches made available to the\r\nclosure / anonymous function as function arguments.\r\n\r\nWhen a route is matched, any subsequent calls to `when()` or\r\n`otherwise()` will have no effect. The `setPrefix()`, `when()` and\r\n`otherwise()` methods can be chained together like below, which will\r\nread somewhat like a typical if..elseif..else construct.\r\n\r\nThe API syntax is inspired by:\r\n\r\n- Laravel Routing      : using a closure function\r\n- AngularJS' Route     : `when..otherwise` and `/url/:identifier` syntax\r\n- AngularJS' Controller: dependency injection based on postional arguments\r\n\r\nAn `$uri` can have identifiers, which are marked with a leading `:`.\r\nIn the following example there is an 'id' identifier\r\nfor a blog article.\r\n\r\nWhen the url is matched, any values that are matched with\r\nidentifiers are made available as arguments of the closure, in\r\nleft-to-right order. Any extra arguments passed between the\r\nURI string and the closure function are also made available as\r\narguments of the closure, after the identifier arguments.\r\n\r\n```php\r\n\r\n<?php\r\n// -- Include composer autoloader\r\n//    or require 'src/Simphplist/Simphplist/Route.php'\r\n\r\n$foo = 'bar'; // A string that is used in some routes\r\n\r\n(new \\Simphplist\\Simphplist\\Route)\r\n\r\n// Use a prefix for developing without rewrite support\r\n// (for example with PHP's excellent built in webserver)\r\n->setPrefix('/route.php')\r\n\r\n->when('/articles/', function() {\r\n\r\n    echo 'This is the article list';\r\n\r\n})\r\n// The identifier is made available to the closure function\r\n->when('/articles/:id/', function($id) {\r\n\r\n    echo 'This is article: ' . $id;\r\n\r\n})\r\n// Here $foo is injected into the closure and used\r\n->when('/archive/', $foo, function($foo) {\r\n\r\n    echo 'This is the archive main page';\r\n    echo \"<br>Also, foo = $foo\";\r\n\r\n})\r\n// Here $foo is injected into the closure after the identifiers\r\n->when('/archive/:y/:m/', $foo, function($y, $m, $foo) {\r\n\r\n    echo \"This is the archive<br>year: $y<br>month: $m\";\r\n    echo \"<br>Also, foo = $foo\";\r\n\r\n})\r\n// Here any value for `:void` is matched, but not used in the closure,\r\n// the user is redirected to the current year/month instead.\r\n->when('/archive/:void/', function() {\r\n\r\n    $y = date('y');\r\n    $m = date('m');\r\n    \\Simphplist\\Simphplist\\Route::redirect(\"/route.php/articles/$y/$m/\");\r\n\r\n})\r\n// When no previous matches are found, redirect to /articles/.\r\n// You could also show a 404 error page here. Otherwise can\r\n// alternatively also accept positional closure arguments, like $foo\r\n->otherwise(function() {\r\n\r\n    \\Simphplist\\Simphplist\\Route::redirect(\"/route.php/articles/\");\r\n\r\n});\r\n\r\n```\r\n\r\nNormally, when the first argument passed to `when()` is a\r\nstring, it will match with any http method (get,post,put,delete, etc.)\r\nused. It is possible to only match on one or more specified\r\n`$_SERVER['REQUEST_METHOD'])`. By passing an array like\r\n`['/url/:id/edit/', 'get']` as first argument, only GET requests will\r\nmatch.\r\n\r\nYou can use this to create a RESTful API interface.\r\n\r\n```php\r\n\r\n<?php\r\n// -- Include composer autoloader\r\n//    or require 'src/Simphplist/Simphplist/Route.php'\r\n\r\n(new \\Simphplist\\Simphplist\\Route)\r\n\r\n->setPrefix('/api-route.php')\r\n\r\n// This route will only match with GET requests\r\n->when(['/article/:id/', 'get'], function($id) {\r\n\r\n    echo 'Getting article: ' . $id;\r\n\r\n})\r\n// This route will only match with POST requests\r\n->when(['/article/new/', 'post'], function() {\r\n\r\n    echo 'Adding article: ' . $id;\r\n\r\n})\r\n// This route will only match with DELETE requests\r\n->when(['/article/:id/', 'delete'], function($id) {\r\n\r\n    echo 'Article: ' . $id . ' is going to be deleted';\r\n\r\n})\r\n// This route will only match with both GET or PUT requests\r\n->when(['/user/:id/', ['post', 'put']], function($id) {\r\n\r\n    echo 'User ID: ' . $id;\r\n\r\n})\r\n->otherwise(function() {\r\n\r\n    echo 'Invalid route';\r\n\r\n});\r\n\r\n```\r\n\r\n\r\n## Installing\r\n\r\nInstall from packagist using composer, by adding a composer.json file:\r\n\r\n```json\r\n\r\n{\r\n    \"name\": \"myProject\",\r\n    \"require\": {\r\n        \"simphplist/simphplist\": \"dev-master\"\r\n    }\r\n}\r\n\r\n```\r\n\r\nAnd running `composer install`.\r\n\r\nPackagist: https://packagist.org/packages/simphplist/simphplist\r\n\r\n\r\n## License\r\n\r\nSpringwhiz is released under an ISC license, that is functionally\r\nequivalent to the simplified BSD and MIT/Expat licenses, with language\r\nthat was deemed unnecessary by the Berne convention removed.\r\n\r\n------------------------------------------------------------------------------\r\n\r\nCopyright (c) 2014-2015  Benjamin Althues <benjamin@babab.nl>\r\n\r\nPermission to use, copy, modify, and distribute this software for any\r\npurpose with or without fee is hereby granted, provided that the above\r\ncopyright notice and this permission notice appear in all copies.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\r\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\r\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\r\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\r\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\r\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\r\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}